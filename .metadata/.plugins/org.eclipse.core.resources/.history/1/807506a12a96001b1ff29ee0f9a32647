import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.sql.Timestamp;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;


public class Readjsonfile {

	 public static HashMap<String, Integer> customerList = new HashMap<String, Integer>();

	 NewCustomer cus = new NewCustomer();
	 
	 public static void main(String[] args) {
	 
	 JSONParser jsonP = new JSONParser();
	 
	 
	 //RewardPointsCalculator rpc = new RewardPointsCalculator();
	 //RewardPoints rp = new RewardPoints();
  
	 try(FileReader reader = new FileReader("src/main/resources/events.json")){  
		 //Read JSON File
		 Object obj = jsonP.parse(reader);
		 JSONObject eventsjsonobj = (JSONObject)obj;
		 JSONArray eventList = (JSONArray) eventsjsonobj.get("events");
		 System.out.println(eventList);
   
		 //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

		 //Iterate over events array
   
   
   
		 for(int i=0;i<eventList.size();i++) {
			 JSONObject eventObj = (JSONObject)eventList.get(i);
	   
			 String action = (String) eventObj.get("action");
			 String name = (String) eventObj.get("name");
			 String date_time = (String) eventObj.get("timestamp");
			 Double amount = 0.0;
			 String time = date_time.substring(11,13);
			 String customer = null;
	   
			 //OffsetDateTime time = OffsetDateTime.parse(date_time, formatter);
			 /* System.out.println("Event no "+ (i+1) + " is:   ");
	   		System.out.println("Action: " + action);
	   		System.out.println("Name: " + name);
	   		System.out.println("Timestamp: " + date_time);
	   		System.out.println("Time is : " + date_time.substring(11,13));
			  	*/
			 // System.out.println("Time is : "+ Timestamp.from(time.toInstant()));
	   
			 if(action.contains("new_customer")) {
				 newCustomer(name, 0);
				 System.out.println("Customer Inserted :"+ name);
				 printRewards();
			 }
			 
			 else if(action.contains("new_order")) {
				 customer = (String) eventObj.get("customer");
				 if(eventObj.get("amount") != null) {
					 amount = (Double) eventObj.get("amount");				 
				 }
				 calculatepoints(customer, time, amount);
			 }
			 
			 System.out.println("--------------");
	   
		 }
		 
		 System.out.println("Final Call");
		 printRewards();
   
	 }
	 catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
	 }
	 
	 
	 
		public static void newCustomer(String name, Integer points) {
			System.out.println("New Customer method");
			customerList.put(name, points);
			
		}

		
		public static void printRewards()  {
			
			for( Map.Entry<String, Integer> entry : customerList.entrySet() ){
			    System.out.println( entry.getKey() + ": " + entry.getValue() + " points");
			
		}
		}
		
		
		public static void calculatepoints(String name, String time, Double amount) {

			System.out.println("Current points in the system");
			printRewards();

			int points = 0;
			int currPoints = 0;
			if(customerList.get(name) != null)
				currPoints = customerList.get(name);
			
			int hours = Integer.parseInt(time);
			
			System.out.println(" Before ---- Name, points, currPoints : "+ name + points + currPoints);
			
			switch(hours) {
			
				case 10 :
					points = (int) (Math.ceil(amount) * 1);
					break;
				
				case 11:
					points = (int) (Math.ceil(amount) * 1 / 2);
					break;
				case 12:
					points = (int) (Math.ceil(amount) * 1 /3);
					break;
				case 13:
					points = (int) (Math.ceil(amount) * 1 /2);
					break;
				case 14:
					points = (int) (Math.ceil(amount) * 1);
					break;
				default:
					points = (int) (Math.ceil(amount) * 0.25);
			
			}	
			
			System.out.println("After --- Name, points, currPoints : "+ name + points + currPoints);
			
			if(points >= 3 ) {
				customerList.put(name, points + currPoints);
			}	
		}
		
}
